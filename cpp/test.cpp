#include "stm32f4xx.h"
#include "FA3R.h"
#include "eig3D.h"
#include "Umeyama.h"
#include "micros.h"
#include "stm32f4xx_rng.h"

#include <opencv2/opencv.hpp>

#include "Harris.h"

using namespace cv;

//Harris algorithm parameters
// Specifies the sensitivity factor of the Harris algorithm (0 < k < 0.25)
float k = 0.25;
// Size of the box filter that is applied to the integral images
int boxFilterSize = 3;
// dimension of the maxima suppression box around a maxima
int maximaSuppressionDimension = 10;

//UI parameters
// dimension of the objects showing a maxima in the image
int markDimension = 5;
// constant for the slider-value division
float divisionConstant = 1000000;

//Global variables
int slider_valueMaxsp = 10;
int slider_valueMeanfilter = 2;
int slider_valuePercentage = 1;
float percentage;
bool gauss = true;

const uint8_t img_raw[64][64] = {
{ 208, 212, 215, 215, 217, 217, 218, 218, 218, 221, 221, 219, 220, 221, 220, 220, 221, 222, 225, 219, 129, 29, 69, 76, 80, 88, 109, 133, 158, 179, 215, 178, 137, 224, 222, 222, 224, 224, 223, 224, 225, 226, 226, 227, 228, 228, 228, 228, 228, 229, 229, 229, 230, 229, 228, 228, 229, 230, 228, 227, 227, 227, 226, 224},
{ 212, 213, 219, 221, 217, 218, 217, 218, 219, 220, 221, 220, 220, 222, 222, 220, 221, 221, 223, 224, 211, 175, 124, 80, 70, 79, 86, 98, 104, 73, 111, 89, 115, 219, 223, 226, 229, 230, 228, 226, 226, 226, 227, 228, 226, 227, 228, 228, 227, 228, 229, 228, 228, 229, 229, 229, 229, 229, 229, 229, 228, 225, 224, 225},
{ 214, 216, 161, 192, 227, 217, 218, 217, 219, 219, 221, 223, 221, 220, 222, 221, 221, 220, 221, 224, 225, 229, 222, 201, 171, 147, 134, 131, 137, 157, 140, 16, 70, 171, 180, 165, 152, 133, 121, 112, 110, 114, 122, 141, 209, 231, 227, 229, 229, 228, 228, 228, 228, 229, 229, 229, 229, 229, 230, 229, 228, 228, 225, 223},
{ 214, 219, 196, 121, 189, 227, 218, 219, 218, 219, 221, 223, 223, 221, 221, 222, 222, 221, 220, 222, 223, 223, 225, 229, 230, 226, 218, 212, 221, 225, 128, 0, 0, 115, 215, 214, 198, 187, 179, 175, 174, 180, 191, 207, 225, 229, 227, 227, 229, 230, 229, 228, 229, 228, 229, 229, 229, 229, 229, 229, 229, 229, 227, 223},
{ 217, 215, 223, 206, 121, 180, 229, 219, 216, 218, 220, 221, 223, 224, 222, 222, 222, 221, 220, 221, 222, 224, 223, 223, 224, 225, 226, 225, 230, 205, 70, 31, 19, 33, 199, 236, 230, 233, 234, 235, 234, 233, 232, 229, 226, 227, 228, 228, 228, 229, 229, 229, 228, 229, 230, 230, 230, 230, 230, 230, 231, 228, 228, 227},
{ 219, 218, 216, 224, 215, 126, 171, 228, 219, 213, 218, 221, 222, 224, 224, 221, 223, 223, 221, 220, 221, 222, 223, 224, 224, 223, 224, 222, 227, 207, 104, 88, 75, 89, 202, 230, 224, 224, 225, 227, 226, 226, 226, 225, 225, 226, 227, 228, 229, 228, 228, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 228, 228, 227},
{ 219, 219, 220, 216, 222, 220, 132, 161, 227, 219, 212, 218, 221, 222, 224, 223, 221, 223, 224, 222, 222, 222, 223, 224, 223, 223, 222, 223, 226, 217, 103, 0, 0, 88, 214, 227, 224, 225, 225, 225, 227, 225, 226, 225, 225, 226, 226, 226, 229, 229, 229, 229, 229, 229, 228, 228, 229, 229, 229, 229, 228, 228, 227, 227},
{ 219, 220, 220, 219, 206, 219, 225, 139, 149, 227, 221, 213, 218, 222, 222, 224, 224, 222, 225, 224, 222, 223, 223, 225, 223, 220, 222, 223, 224, 228, 150, 3, 0, 133, 225, 224, 223, 224, 225, 223, 225, 231, 231, 232, 230, 225, 225, 226, 226, 229, 230, 229, 228, 229, 230, 229, 228, 229, 228, 228, 228, 228, 228, 227},
{ 220, 220, 221, 223, 217, 203, 218, 227, 149, 140, 225, 222, 215, 219, 221, 223, 225, 224, 223, 225, 224, 223, 224, 225, 223, 215, 221, 222, 223, 231, 183, 91, 69, 136, 228, 225, 223, 223, 223, 227, 224, 197, 184, 192, 216, 231, 227, 226, 227, 227, 229, 231, 235, 231, 229, 231, 229, 229, 229, 228, 228, 228, 229, 228},
{ 220, 221, 222, 222, 223, 217, 203, 217, 229, 159, 131, 220, 227, 216, 218, 222, 224, 224, 222, 224, 225, 223, 223, 224, 225, 225, 221, 222, 224, 229, 207, 123, 69, 147, 229, 226, 224, 222, 225, 221, 151, 106, 85, 92, 130, 185, 229, 228, 226, 227, 230, 223, 180, 223, 234, 229, 231, 230, 229, 229, 229, 229, 230, 229},
{ 220, 222, 222, 223, 223, 223, 213, 204, 216, 231, 167, 124, 217, 228, 215, 217, 222, 223, 223, 222, 222, 220, 218, 219, 219, 220, 220, 220, 223, 227, 219, 136, 38, 144, 226, 228, 223, 223, 229, 167, 84, 118, 136, 107, 96, 108, 186, 234, 228, 227, 229, 230, 132, 152, 234, 231, 230, 230, 230, 230, 230, 230, 229, 228},
{ 220, 222, 224, 223, 223, 225, 220, 210, 203, 214, 231, 176, 121, 213, 228, 216, 217, 221, 225, 223, 220, 215, 212, 210, 210, 210, 211, 212, 214, 220, 220, 145, 38, 131, 220, 224, 221, 223, 223, 126, 102, 77, 124, 143, 103, 90, 137, 216, 234, 227, 227, 235, 203, 61, 181, 236, 231, 231, 231, 231, 230, 230, 229, 229},
{ 222, 222, 224, 224, 224, 224, 224, 219, 212, 204, 211, 230, 187, 119, 208, 229, 210, 215, 221, 223, 222, 217, 211, 206, 203, 203, 202, 206, 207, 209, 215, 163, 40, 120, 210, 215, 211, 217, 211, 108, 103, 110, 0, 92, 111, 105, 124, 197, 236, 228, 229, 229, 232, 149, 64, 204, 236, 230, 231, 231, 231, 230, 229, 230},
{ 224, 224, 225, 226, 226, 225, 224, 225, 221, 213, 204, 211, 231, 194, 119, 201, 229, 217, 216, 221, 222, 221, 216, 209, 204, 202, 201, 204, 206, 199, 204, 169, 37, 95, 203, 213, 205, 209, 205, 114, 24, 129, 129, 87, 112, 146, 88, 200, 236, 229, 231, 228, 234, 216, 88, 116, 220, 234, 230, 231, 231, 231, 230, 229},
{ 225, 225, 226, 227, 227, 226, 224, 224, 225, 221, 213, 205, 209, 230, 201, 116, 193, 230, 218, 217, 219, 222, 219, 216, 213, 210, 208, 206, 210, 204, 196, 166, 37, 67, 197, 216, 206, 204, 207, 140, 0, 81, 133, 144, 137, 65, 100, 221, 232, 228, 230, 231, 228, 236, 189, 40, 158, 229, 230, 230, 230, 231, 231, 229},
{ 225, 226, 226, 228, 228, 227, 227, 225, 225, 226, 222, 214, 206, 209, 229, 207, 115, 182, 228, 217, 215, 217, 220, 219, 220, 218, 216, 216, 218, 216, 204, 174, 110, 124, 203, 220, 212, 205, 211, 177, 3, 53, 98, 75, 34, 0, 169, 235, 226, 227, 228, 231, 230, 229, 233, 159, 61, 194, 233, 230, 231, 230, 230, 231},
{ 232, 227, 227, 227, 228, 228, 228, 226, 224, 224, 226, 222, 216, 207, 208, 228, 210, 120, 173, 227, 217, 213, 218, 220, 218, 219, 218, 218, 220, 220, 212, 188, 121, 59, 171, 230, 220, 218, 221, 125, 41, 103, 0, 0, 0, 139, 223, 231, 228, 228, 227, 228, 229, 229, 231, 228, 129, 119, 223, 231, 230, 232, 230, 229},
{ 192, 235, 227, 228, 230, 229, 229, 228, 225, 224, 225, 226, 222, 216, 205, 206, 226, 216, 129, 166, 227, 219, 215, 217, 216, 216, 219, 218, 219, 221, 216, 191, 92, 36, 151, 229, 224, 228, 166, 129, 214, 202, 154, 187, 198, 227, 229, 228, 229, 228, 227, 228, 228, 228, 228, 233, 220, 112, 181, 235, 228, 230, 229, 229},
{ 31, 183, 236, 229, 229, 231, 230, 228, 227, 226, 225, 225, 226, 223, 215, 203, 204, 223, 220, 136, 155, 226, 221, 215, 209, 212, 219, 219, 219, 219, 215, 200, 121, 32, 122, 218, 230, 169, 145, 222, 231, 184, 201, 237, 229, 227, 225, 228, 229, 228, 228, 227, 227, 227, 228, 227, 235, 210, 142, 220, 232, 229, 235, 230},
{ 51, 4, 185, 238, 228, 230, 231, 228, 229, 227, 225, 225, 225, 227, 223, 213, 200, 200, 216, 223, 144, 144, 221, 221, 214, 214, 216, 217, 217, 216, 214, 201, 126, 29, 67, 209, 188, 125, 215, 222, 221, 174, 209, 228, 223, 228, 225, 223, 227, 229, 228, 228, 226, 227, 228, 228, 227, 235, 201, 169, 233, 224, 203, 228},
{ 78, 38, 38, 200, 237, 228, 231, 231, 229, 229, 226, 226, 225, 225, 227, 222, 212, 198, 185, 217, 227, 151, 132, 217, 222, 213, 212, 214, 215, 213, 204, 178, 102, 83, 115, 151, 121, 205, 217, 215, 214, 169, 217, 224, 223, 225, 225, 217, 219, 227, 228, 229, 228, 227, 227, 228, 228, 229, 239, 195, 189, 136, 107, 226},
{ 67, 75, 4, 92, 220, 234, 229, 232, 231, 231, 229, 226, 225, 224, 226, 226, 219, 210, 201, 198, 219, 229, 159, 116, 212, 223, 212, 209, 214, 209, 201, 131, 92, 135, 150, 89, 122, 192, 211, 217, 198, 173, 220, 217, 218, 220, 222, 216, 208, 217, 228, 229, 229, 228, 227, 226, 229, 227, 160, 110, 76, 0, 162, 235},
{ 159, 30, 69, 0, 166, 236, 229, 232, 231, 231, 231, 227, 225, 225, 223, 224, 225, 219, 210, 200, 197, 217, 228, 165, 103, 205, 222, 217, 195, 122, 129, 92, 101, 153, 126, 103, 143, 129, 195, 226, 188, 181, 221, 215, 215, 215, 218, 217, 208, 200, 215, 228, 228, 227, 226, 226, 234, 188, 13, 0, 35, 25, 104, 201},
{ 235, 159, 23, 12, 111, 233, 238, 228, 232, 231, 231, 229, 227, 225, 224, 224, 226, 224, 219, 210, 198, 195, 214, 228, 173, 87, 200, 215, 115, 59, 14, 95, 145, 151, 102, 132, 149, 137, 104, 158, 177, 195, 218, 212, 212, 211, 214, 218, 213, 196, 194, 218, 230, 232, 234, 234, 226, 136, 89, 67, 1, 51, 48, 89},
{ 234, 237, 169, 0, 62, 166, 220, 239, 236, 233, 230, 230, 228, 225, 225, 225, 225, 225, 224, 216, 208, 199, 193, 211, 226, 179, 110, 128, 89, 59, 115, 177, 160, 130, 105, 146, 143, 120, 84, 38, 78, 201, 224, 217, 217, 218, 219, 223, 226, 214, 195, 199, 216, 208, 181, 164, 138, 50, 55, 38, 0, 47, 75, 73},
{ 233, 233, 237, 187, 56, 0, 111, 205, 214, 233, 234, 231, 229, 225, 224, 223, 224, 225, 222, 221, 214, 207, 196, 189, 208, 225, 163, 78, 76, 89, 137, 147, 139, 114, 118, 148, 131, 105, 114, 57, 0, 119, 189, 198, 195, 194, 194, 186, 169, 161, 137, 101, 95, 60, 36, 73, 100, 34, 19, 84, 102, 42, 54, 86},
{ 234, 231, 229, 236, 206, 109, 0, 42, 73, 153, 229, 232, 228, 226, 225, 226, 224, 220, 222, 222, 217, 210, 204, 193, 187, 189, 111, 77, 107, 63, 97, 129, 143, 111, 134, 146, 92, 153, 161, 13, 24, 85, 36, 56, 50, 76, 112, 46, 36, 41, 45, 64, 75, 74, 99, 92, 32, 26, 48, 73, 81, 30, 180, 148},
{ 234, 233, 226, 228, 227, 126, 0, 49, 75, 0, 186, 240, 231, 232, 229, 216, 224, 214, 210, 216, 220, 218, 216, 210, 201, 181, 170, 186, 112, 79, 90, 136, 173, 84, 112, 111, 126, 175, 134, 0, 46, 113, 84, 65, 71, 83, 116, 90, 73, 80, 78, 72, 68, 97, 130, 98, 55, 70, 42, 18, 0, 153, 235, 182},
{ 235, 234, 229, 229, 179, 0, 34, 42, 61, 24, 132, 216, 210, 210, 194, 95, 154, 172, 103, 82, 159, 187, 182, 178, 176, 174, 186, 184, 121, 105, 111, 162, 127, 64, 113, 107, 183, 163, 58, 73, 138, 129, 77, 58, 41, 44, 116, 100, 30, 26, 84, 64, 28, 51, 121, 145, 96, 44, 127, 153, 179, 227, 229, 220},
{ 235, 236, 232, 228, 156, 2, 36, 0, 43, 63, 52, 120, 151, 121, 100, 3, 42, 93, 84, 132, 162, 160, 172, 188, 188, 185, 199, 209, 146, 110, 135, 144, 35, 65, 119, 139, 148, 108, 59, 93, 117, 132, 39, 82, 144, 110, 60, 98, 150, 167, 185, 182, 174, 172, 198, 162, 35, 125, 218, 235, 232, 228, 226, 229},
{ 236, 237, 237, 233, 169, 81, 115, 60, 48, 56, 66, 59, 87, 151, 152, 129, 121, 135, 158, 197, 185, 194, 206, 194, 200, 209, 196, 210, 153, 136, 143, 104, 18, 83, 105, 89, 113, 84, 88, 98, 73, 108, 169, 198, 219, 209, 157, 55, 130, 213, 224, 217, 217, 210, 196, 149, 149, 216, 229, 226, 228, 228, 229, 228},
{ 236, 237, 237, 237, 216, 123, 105, 78, 41, 52, 62, 71, 74, 146, 199, 204, 169, 169, 177, 175, 155, 152, 154, 157, 137, 169, 188, 176, 145, 147, 133, 121, 78, 68, 85, 10, 86, 81, 96, 103, 51, 125, 174, 200, 207, 209, 216, 195, 114, 59, 167, 210, 206, 199, 193, 194, 211, 221, 221, 224, 229, 229, 228, 227},
{ 236, 237, 238, 237, 236, 187, 59, 29, 43, 56, 61, 62, 66, 68, 126, 169, 181, 166, 133, 128, 123, 137, 125, 165, 150, 188, 155, 8, 113, 120, 103, 153, 107, 39, 74, 142, 85, 87, 113, 61, 0, 110, 116, 136, 190, 193, 192, 200, 204, 166, 69, 108, 183, 202, 192, 186, 194, 211, 220, 221, 226, 229, 228, 226},
{ 236, 237, 239, 239, 236, 233, 193, 156, 161, 136, 57, 65, 63, 76, 22, 107, 190, 150, 123, 195, 224, 221, 219, 215, 213, 211, 162, 0, 99, 92, 111, 153, 32, 0, 96, 164, 99, 57, 98, 27, 0, 107, 142, 100, 168, 186, 181, 183, 188, 200, 199, 139, 46, 134, 193, 191, 189, 204, 217, 222, 222, 226, 228, 227},
{ 237, 237, 239, 240, 239, 234, 231, 222, 212, 188, 108, 25, 69, 64, 78, 24, 151, 207, 177, 209, 212, 209, 209, 201, 202, 191, 141, 153, 97, 78, 129, 86, 8, 57, 34, 33, 76, 75, 74, 11, 74, 45, 105, 104, 148, 186, 188, 190, 196, 199, 208, 219, 189, 96, 89, 189, 193, 193, 213, 222, 222, 222, 227, 228},
{ 238, 237, 238, 240, 240, 238, 233, 221, 210, 212, 196, 128, 26, 68, 72, 59, 95, 177, 206, 208, 202, 200, 199, 196, 194, 143, 164, 177, 134, 112, 93, 9, 36, 84, 72, 92, 107, 114, 55, 60, 139, 144, 98, 83, 156, 178, 193, 204, 208, 210, 212, 216, 224, 216, 167, 194, 205, 190, 203, 221, 224, 222, 225, 227},
{ 237, 238, 238, 239, 239, 238, 236, 228, 213, 207, 213, 206, 134, 27, 70, 71, 53, 173, 209, 198, 196, 192, 192, 197, 154, 154, 192, 169, 139, 120, 114, 62, 0, 95, 201, 212, 223, 200, 75, 24, 122, 164, 141, 109, 184, 192, 182, 204, 217, 219, 220, 222, 222, 224, 228, 223, 215, 202, 194, 211, 225, 224, 224, 226},
{ 237, 237, 238, 240, 240, 239, 238, 232, 217, 207, 205, 206, 205, 152, 51, 60, 56, 99, 192, 202, 198, 198, 204, 179, 146, 200, 197, 183, 143, 102, 101, 120, 30, 93, 217, 228, 227, 195, 104, 70, 82, 146, 140, 97, 181, 210, 196, 193, 209, 221, 222, 223, 224, 224, 224, 226, 224, 212, 195, 195, 216, 225, 224, 224},
{ 236, 238, 239, 239, 239, 239, 237, 234, 220, 207, 207, 207, 203, 207, 180, 104, 13, 60, 190, 212, 207, 213, 205, 149, 200, 212, 204, 197, 164, 122, 65, 110, 113, 60, 177, 191, 204, 205, 145, 88, 104, 84, 87, 106, 116, 185, 211, 202, 197, 206, 219, 221, 222, 223, 224, 225, 227, 220, 201, 186, 198, 219, 225, 224},
{ 237, 237, 238, 239, 239, 239, 238, 236, 226, 209, 206, 210, 203, 196, 207, 208, 151, 160, 221, 218, 217, 224, 167, 190, 222, 214, 215, 210, 186, 147, 95, 90, 122, 103, 172, 162, 152, 200, 153, 75, 66, 82, 89, 98, 117, 130, 201, 208, 206, 198, 203, 217, 219, 219, 221, 223, 224, 224, 212, 190, 185, 204, 220, 223},
{ 235, 237, 238, 238, 238, 239, 238, 236, 230, 213, 206, 209, 206, 197, 196, 207, 221, 228, 228, 223, 229, 187, 176, 227, 218, 218, 217, 214, 203, 170, 114, 79, 106, 114, 173, 197, 185, 202, 151, 104, 34, 87, 116, 98, 113, 76, 164, 212, 204, 207, 199, 205, 216, 218, 220, 221, 222, 223, 220, 203, 186, 191, 211, 220},
{ 236, 237, 237, 238, 238, 239, 238, 237, 231, 219, 209, 211, 211, 199, 191, 195, 208, 221, 229, 232, 216, 168, 219, 223, 217, 217, 215, 214, 208, 188, 162, 124, 87, 88, 165, 209, 204, 202, 149, 106, 112, 103, 139, 178, 138, 83, 108, 201, 206, 206, 207, 203, 211, 217, 219, 221, 221, 220, 221, 216, 194, 186, 202, 217},
{ 235, 235, 237, 238, 238, 238, 237, 237, 237, 230, 220, 213, 214, 204, 182, 177, 192, 208, 222, 229, 225, 228, 225, 221, 222, 218, 218, 214, 211, 195, 169, 166, 134, 33, 144, 177, 186, 207, 156, 119, 121, 115, 152, 196, 193, 134, 77, 165, 213, 208, 212, 210, 210, 216, 219, 220, 221, 222, 221, 222, 210, 190, 193, 208},
{ 233, 235, 236, 236, 236, 236, 237, 239, 222, 212, 204, 218, 218, 214, 197, 178, 179, 193, 215, 224, 212, 198, 204, 199, 191, 207, 198, 208, 210, 205, 180, 163, 167, 103, 104, 201, 202, 210, 173, 138, 137, 120, 146, 182, 202, 188, 122, 125, 198, 216, 190, 204, 214, 216, 221, 222, 223, 224, 224, 224, 222, 207, 194, 203},
{ 233, 234, 234, 236, 236, 236, 236, 241, 212, 125, 183, 188, 192, 189, 177, 161, 143, 158, 166, 215, 183, 124, 151, 145, 131, 184, 158, 201, 212, 208, 202, 186, 172, 140, 170, 209, 169, 192, 193, 163, 155, 162, 180, 156, 185, 203, 174, 112, 132, 159, 25, 147, 216, 214, 220, 224, 224, 225, 226, 225, 225, 221, 209, 203},
{ 233, 234, 234, 235, 235, 236, 234, 239, 232, 132, 199, 149, 148, 132, 125, 134, 133, 111, 114, 200, 183, 145, 141, 143, 147, 189, 166, 202, 213, 209, 209, 208, 195, 161, 185, 213, 205, 210, 200, 152, 157, 188, 205, 185, 155, 190, 189, 146, 96, 29, 3, 129, 217, 215, 215, 222, 224, 226, 226, 227, 227, 226, 222, 212},
{ 233, 232, 233, 235, 235, 235, 234, 239, 206, 136, 175, 160, 132, 138, 152, 161, 158, 129, 106, 184, 174, 147, 132, 138, 161, 143, 147, 214, 215, 212, 213, 211, 210, 190, 186, 190, 192, 193, 192, 175, 194, 200, 206, 211, 187, 158, 189, 161, 66, 60, 5, 156, 225, 217, 216, 218, 223, 226, 227, 228, 228, 227, 226, 222},
{ 232, 233, 233, 234, 236, 235, 235, 235, 220, 224, 217, 199, 209, 199, 192, 204, 199, 181, 170, 196, 199, 203, 205, 203, 211, 182, 198, 223, 216, 214, 216, 215, 212, 200, 163, 176, 200, 218, 201, 178, 212, 211, 208, 209, 211, 192, 168, 108, 24, 56, 47, 93, 188, 225, 220, 219, 219, 224, 228, 228, 228, 228, 227, 226},
{ 232, 233, 232, 234, 235, 234, 235, 234, 237, 235, 237, 238, 233, 225, 219, 218, 218, 214, 210, 206, 212, 222, 228, 227, 223, 226, 223, 220, 219, 217, 218, 219, 215, 208, 176, 193, 209, 201, 202, 166, 205, 213, 206, 204, 208, 215, 151, 4, 66, 3, 99, 172, 111, 179, 227, 221, 219, 221, 224, 227, 229, 228, 227, 226},
{ 232, 233, 232, 232, 234, 235, 235, 233, 233, 232, 233, 232, 230, 223, 216, 216, 217, 216, 212, 212, 214, 218, 223, 226, 224, 221, 220, 222, 222, 221, 220, 221, 219, 211, 184, 197, 184, 189, 211, 158, 194, 214, 204, 198, 208, 191, 72, 47, 59, 1, 138, 227, 196, 104, 172, 226, 223, 221, 222, 225, 228, 228, 227, 226},
{ 230, 232, 233, 232, 232, 234, 235, 233, 233, 234, 234, 233, 231, 230, 223, 219, 219, 219, 217, 216, 220, 223, 225, 228, 227, 224, 223, 222, 222, 222, 223, 224, 223, 213, 191, 192, 211, 218, 219, 149, 178, 215, 202, 199, 200, 124, 19, 62, 45, 19, 173, 221, 222, 201, 105, 161, 224, 226, 223, 223, 224, 227, 227, 227},
{ 229, 231, 232, 232, 232, 234, 234, 235, 233, 233, 234, 234, 232, 232, 228, 222, 222, 221, 220, 219, 221, 225, 226, 227, 228, 226, 224, 222, 222, 223, 223, 224, 226, 217, 191, 193, 194, 189, 193, 183, 173, 209, 200, 205, 169, 42, 57, 53, 16, 99, 186, 204, 215, 223, 205, 110, 151, 224, 228, 222, 223, 224, 227, 227},
{ 228, 231, 230, 233, 232, 233, 234, 234, 233, 232, 233, 232, 232, 231, 231, 227, 225, 224, 222, 219, 221, 224, 226, 227, 228, 227, 225, 224, 223, 223, 224, 224, 225, 221, 195, 198, 173, 170, 208, 207, 180, 203, 203, 197, 110, 30, 60, 49, 4, 161, 218, 191, 199, 214, 222, 211, 120, 140, 222, 228, 224, 224, 223, 225},
{ 228, 230, 231, 232, 233, 232, 234, 231, 233, 234, 233, 232, 232, 231, 231, 229, 227, 226, 227, 220, 220, 222, 225, 226, 228, 229, 226, 224, 223, 223, 224, 226, 226, 222, 204, 192, 204, 196, 206, 207, 189, 201, 204, 170, 48, 57, 58, 17, 87, 205, 221, 214, 193, 197, 213, 222, 217, 129, 125, 217, 230, 223, 224, 224},
{ 227, 229, 231, 232, 231, 232, 232, 231, 232, 233, 232, 232, 232, 232, 231, 230, 229, 227, 227, 224, 219, 221, 224, 225, 227, 229, 226, 226, 225, 222, 222, 226, 227, 223, 208, 196, 207, 178, 163, 208, 213, 200, 201, 132, 21, 64, 58, 3, 158, 225, 217, 218, 216, 192, 194, 212, 220, 221, 137, 107, 212, 230, 224, 225},
{ 228, 228, 230, 232, 231, 232, 231, 231, 232, 233, 232, 232, 231, 232, 230, 230, 229, 227, 226, 227, 222, 220, 223, 225, 226, 227, 228, 226, 225, 223, 222, 223, 227, 224, 209, 195, 209, 194, 203, 216, 211, 202, 192, 92, 30, 68, 27, 83, 202, 221, 219, 218, 218, 217, 193, 193, 213, 220, 224, 146, 84, 205, 231, 223},
{ 228, 228, 228, 230, 231, 232, 232, 232, 232, 233, 232, 231, 231, 231, 231, 230, 230, 229, 228, 228, 225, 220, 220, 223, 224, 226, 229, 228, 225, 224, 224, 223, 225, 224, 213, 198, 199, 205, 226, 205, 206, 204, 178, 53, 50, 63, 5, 156, 217, 218, 221, 220, 217, 219, 216, 194, 193, 214, 220, 225, 156, 65, 197, 231},
{ 227, 227, 228, 229, 230, 232, 232, 232, 231, 232, 232, 231, 231, 230, 230, 230, 230, 229, 227, 229, 227, 224, 221, 222, 223, 225, 228, 229, 227, 226, 225, 224, 224, 224, 214, 199, 196, 185, 179, 169, 210, 205, 161, 4, 61, 22, 95, 203, 217, 216, 221, 221, 219, 216, 219, 218, 195, 192, 213, 218, 226, 164, 39, 188},
{ 225, 228, 228, 228, 230, 229, 230, 231, 231, 231, 232, 230, 231, 230, 229, 231, 229, 228, 227, 228, 228, 227, 224, 221, 224, 225, 226, 230, 230, 228, 226, 225, 222, 222, 214, 199, 205, 153, 134, 179, 206, 206, 144, 0, 53, 19, 170, 217, 216, 218, 218, 221, 221, 218, 217, 219, 218, 196, 191, 212, 217, 226, 171, 36},
{ 224, 227, 227, 227, 230, 229, 229, 230, 231, 230, 231, 230, 230, 231, 229, 229, 228, 229, 230, 229, 228, 226, 227, 224, 224, 226, 227, 228, 230, 229, 227, 225, 222, 220, 214, 199, 207, 157, 153, 193, 206, 208, 115, 0, 14, 126, 209, 214, 218, 220, 219, 219, 221, 221, 216, 216, 218, 218, 198, 190, 212, 218, 226, 182},
{ 224, 225, 227, 227, 229, 229, 230, 231, 228, 229, 230, 230, 229, 229, 229, 229, 229, 228, 229, 229, 228, 229, 228, 225, 225, 227, 229, 227, 231, 231, 228, 225, 222, 219, 213, 199, 212, 178, 64, 67, 117, 154, 69, 0, 77, 192, 213, 212, 219, 220, 219, 217, 218, 219, 218, 216, 219, 220, 218, 201, 192, 210, 217, 222},
{ 223, 224, 226, 226, 227, 228, 228, 230, 229, 228, 228, 230, 228, 227, 229, 229, 229, 228, 229, 228, 229, 229, 228, 226, 226, 227, 226, 228, 230, 231, 228, 225, 222, 220, 212, 203, 204, 121, 73, 71, 38, 8, 19, 21, 160, 212, 211, 214, 219, 221, 220, 220, 218, 216, 217, 217, 219, 221, 219, 220, 203, 190, 209, 217},
{ 222, 222, 225, 225, 226, 227, 227, 227, 227, 227, 228, 229, 227, 227, 228, 229, 228, 228, 228, 228, 229, 229, 228, 230, 228, 226, 226, 229, 228, 229, 228, 224, 222, 221, 211, 204, 159, 76, 106, 81, 51, 43, 56, 133, 202, 209, 214, 218, 219, 220, 219, 221, 220, 216, 217, 218, 217, 220, 221, 220, 220, 203, 188, 207},
{ 222, 222, 224, 226, 225, 226, 226, 227, 228, 226, 226, 227, 226, 226, 227, 228, 227, 227, 228, 228, 228, 229, 227, 228, 229, 228, 227, 228, 228, 226, 226, 224, 224, 222, 216, 198, 117, 82, 97, 65, 78, 100, 76, 130, 183, 207, 217, 221, 221, 220, 221, 219, 220, 217, 218, 219, 217, 216, 219, 219, 220, 219, 202, 187}
};

Mat *m_img = nullptr;

void doHarris() {
    // compute harris
    Harris harris(*m_img, k, boxFilterSize, gauss);

    // get vector of points wanted
    vector<pointData> resPts = harris.getMaximaPoints(percentage, boxFilterSize, maximaSuppressionDimension);
    cout << resPts.size() << " Points" << endl;
}

float getRandom()
{
    int32_t random;
    while(RNG_GetFlagStatus(RNG_FLAG_DRDY) == RESET);
    random = RNG_GetRandomNumber();
    return (float)random / (float)RAND_MAX / 1e6f;
}

Vector3f getRandomVector()
{
	float e0 = getRandom();
	float e1 = getRandom();
	float e2 = getRandom();

	Vector3f v(e0, e1, e2);
	v.normalize();
	return v;
}

float EstimationError(const vector<Vector3f>& P, const vector<Vector3f>& Q, const Matrix3f& R, Vector3f& T)
{
	int N = P.size();
	float error = 0;
	for (int i = 0; i < N; ++i)
	{
		error += (R.transpose() * Q[i] + T - P[i]).norm() * (R.transpose() * Q[i] + T - P[i]).norm();
	}
	return error / N;
}

Matrix3f R_umeyama_fast, R_umeyama_eigen, R_FA3R_int, R_eig3D_eig, R_eig3D_symbolic, R_FA3R_float;
Vector3f T_umeyama_fast, T_umeyama_eigen, T_FA3R_int, T_eig3D_eig, T_eig3D_symbolic, T_FA3R_float;
uint64_t counter = 0;
const int len = 10;
const float reference_scale = 10.0f;
const float T_scale = 10.0f;
const float snr = 1.0f;
const int FA3R_num = 6;
float time_umeyama_fast = 0,
             time_umeyama_eigen = 0,
             time_FA3R_int = 0,
             time_FA3R_float = 0,
             time_eig3D_eig = 0, 
             time_eig3D_symbolic = 0;
             
extern "C" void test(void);

int edgeThresh = 1;
int lowThreshold;
int const max_lowThreshold = 200;
int ratio = 3;
int kernel_size = 3;
Mat detected_edges;

uint8_t edges[64][64];
                             
void test(void)
{
    if(true){
        Mat img(64, 64, CV_32F);
        for(int i = 0; i < 64; ++i)
            for(int j = 0; j < 64; ++j)
                img.at<float>(i, j) = (float)img_raw[i][j];
        blur(img, detected_edges, Size(3, 3));
        Canny(detected_edges, detected_edges, lowThreshold, lowThreshold * ratio, kernel_size);
        for(int i = 0; i < 64; ++i)
            for(int j = 0; j < 64; ++j)
                edges[i][j] = detected_edges.at<float>(i, j);
    }

    
    if(true)
    {
        vector<Vector3f> pointsOriginal;
        vector<Vector3f> pointsTransformed;
        for(int j = 0 ; j < len ; ++j)
        {
            Vector3f v = getRandomVector();
            pointsOriginal.push_back(v * reference_scale);
        }

        Vector3f axis = getRandomVector();
        Vector3f T = getRandomVector() * T_scale;
        float angle = 2.0f * M_PI * getRandom();
        Quaterniond Q;
        Q = AngleAxisd((double) angle, axis.cast<double>());

        for(int j = 0 ; j < len ; ++j)
        {
            Vector3f tmp = Q.cast<float>()._transformVector(pointsOriginal[j]) + (1.0f / snr) * (reference_scale + T_scale) * getRandomVector() + T;
            pointsTransformed.push_back(tmp);
        }
                    
        Matrix3f M;
        M.setZero();
        Vector3f mean_X, mean_Y;

        int nn = pointsTransformed.size();
        mean_X.setZero();
        mean_Y.setZero();

        for (int i = 0; i < nn; ++i)
        {
            mean_X = mean_X + pointsTransformed[i];
            mean_Y = mean_Y + pointsOriginal[i];
        }
        mean_X = mean_X / nn;
        mean_Y = mean_Y / nn;

        for (int i = 0; i < nn; ++i)
        {
            M = M + (pointsOriginal[i] - mean_Y) * ((pointsTransformed[i] - mean_X).transpose());
        }
        M = M / nn;
        
        
        float time;
        Umeyama(nullptr, nullptr, &M, &R_umeyama_fast, &T_umeyama_fast, true, time);
        time_umeyama_fast += time * 1e-6f;

        Umeyama(nullptr, nullptr, &M, &R_umeyama_eigen, &T_umeyama_eigen, false, time);
	time_umeyama_eigen += time * 1e-6f;

	FA3R_int(nullptr, nullptr, &M, FA3R_num, &R_FA3R_int, &T_FA3R_int, time);
	time_FA3R_int += time * 1e-6f;

	FA3R_float(nullptr, nullptr, &M, FA3R_num, &R_FA3R_float, &T_FA3R_float, time);
	time_FA3R_float += time * 1e-6f;

	eig3D_eig(nullptr, nullptr, &M, &R_eig3D_eig, &T_eig3D_eig, time);
	time_eig3D_eig += time * 1e-6f;

	eig3D_symbolic(nullptr, nullptr, &M, &R_eig3D_symbolic, &T_eig3D_symbolic, time);
	time_eig3D_symbolic += time * 1e-6f;
        
        ++counter;
    }
}